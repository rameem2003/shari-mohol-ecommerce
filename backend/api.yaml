openapi: 3.0.0
info:
  title: Shari Mohol
  description: >-
    ## üì¶ **Postman Collection Description: Shari Mohol**


    You can paste this into the **"Description"** section of your Postman
    collection:


    ---


    ### üõçÔ∏è **Shari Mohol - E-commerce API**


    Welcome to the **Shari Mohol** backend API collection! This collection
    provides access to the full range of RESTful API endpoints used in the Shari
    Mohol e-commerce platform.


    ---


    ### üöÄ **Tech Stack**


    - **Node.js** + **Express.js**
        
    - **MongoDB Atlas** + **Mongoose**
        
    - **JWT** for authentication
        
    - **Bcrypt** for secure password handling
        
    - **Multer** for file uploads
        
    - **Cookie-parser** for cookie management
        
    - **NodeMailer** for email services
        
    - **SSLCommerz** for secure payment integration
        

    ---


    ### üîê **Authentication & Security**


    - JWT-based login and session management
        
    - Passwords encrypted with Bcrypt
        
    - Session and access tokens managed securely
        
    - Environment-specific configurations via `.env`
        

    ``` bash

    PORT = [Backend port]

    SALT = [Bcrypt salt round number]

    JWT_SECRET = [JWT secret string]

    SESSION_SECRET = [Session secret]

    MONGO_URI = [MongoDB Atlas URI]

    BASE_URL = [Backend base URL]

    HOST_URL = [Your server URL]

    RENDER_HOST_URL = [Remote backend URL]

    VERCEL_HOST_URL = [Frontend/client URL]

    STORE_ID = [SSL Commerz Store ID]

    STORE_PASS = [SSL Commerz Store Password]

    SYSTEM_ENV = development | production

     ```

    StartFragment


    ### üìö **Using This Collection**


    - Import this collection into Postman.
        
    - Set up a Postman **Environment** with your variables (`BASE_URL`, `JWT`,
    etc.).
        
    - Start testing your endpoints, such as user registration, login, product
    management, and payment.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
  - url: http://localhost:5000/
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
tags:
  - name: Auth
    description: All Authentication Endpoints
  - name: Banner
    description: E-commerce banner api endpoints
  - name: Category
    description: Category endpoints
  - name: Order
    description: Order endpoints
  - name: Product
    description: Product endpoints
paths:
  /v1/auth/users:
    get:
      tags:
        - Auth
      summary: All Users
      description: Return all users information
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/user/67cfb60b159cddcaa1bc95af:
    get:
      tags:
        - Auth
      summary: Single User
      description: Return singer user information by user ID
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/register:
    post:
      tags:
        - Auth
      summary: Register
      description: |-
        Create a user

        Use a valid user email.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Test1
                email: info.bd@gmail.com
                password: "123456"
                role: admin
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Login endpoint for a user by email and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: rameem2019@gmail.com
                password: "123456"
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/otp-verify:
    post:
      tags:
        - Auth
      summary: OTP Verify
      description: Sent otp email for email verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: info.rolstudio.bd@gmail.com
                otp: "638185"
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/otp-resend:
    post:
      tags:
        - Auth
      summary: OTP Resend
      description: OTP resend endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: info.rolstudio.bd@gmail.com
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/logout/67cfb60b159cddcaa1bc95af:
    post:
      tags:
        - Auth
      summary: Logout User
      description: User logout endpoint
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/update/67cfb60b159cddcaa1bc95af:
    patch:
      tags:
        - Auth
      summary: Profile Update
      description: User profile update endpoint
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Rameem
                phone:
                  type: integer
                  example: "01409029641"
                address:
                  type: string
                  example: Mirpur, Dhaka
                photo:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/forgetpassword/info.rolstudio.bd@gmail.com:
    patch:
      tags:
        - Auth
      summary: Forget Password
      description: User forget password endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                newPassword: "654321"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/changepassword/67e378c2ed428a996fcbc3ab:
    patch:
      tags:
        - Auth
      summary: Change Password
      description: New password create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                oldPassword: "123456"
                newPassword: "654321"
                conFirmPassword: "654321"
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/auth/delete/id:
    delete:
      tags:
        - Auth
      summary: Delete User
      description: Admin can delete a user
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/banner/all:
    get:
      tags:
        - Banner
      summary: All Banners
      description: Return all banner info
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/v1/banner/create:
    post:
      tags:
        - Banner
      summary: Add New Banner
      description: Create a new banner
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                banner:
                  type: string
                  format: binary
                description:
                  type: string
                  example: Test
                advertisementLink:
                  type: string
                  example: Test
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/banner/delete/67ce5e5afe19ba81b603c254:
    delete:
      tags:
        - Banner
      summary: Delete a Banner
      description: Banner delete endpint
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/category/all:
    get:
      tags:
        - Category
      summary: All Categories
      description: Return all categories
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/category/single/67e413553ab2056d3f68333a:
    get:
      tags:
        - Category
      summary: Get Single Category
      description: Return single category by id
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/category/create:
    post:
      tags:
        - Category
      summary: Create new Category
      description: Create a new category
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: regergret
                description:
                  type: string
                  example: wefweferfergeergerg
                subCategories:
                  type: string
                  example: Cotton, Jamdani, Suti
                image:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/category/update/67ef539ceecb006a9192cf99:
    patch:
      tags:
        - Category
      summary: Update Category
      description: Category data update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Shari
                description:
                  type: string
                  example: Shari
                subCategories:
                  type: string
                  example: Jamdani, Jorjet, Katan
                image:
                  type: string
                  format: binary
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/category/delete/67ef539ceecb006a9192cf99:
    delete:
      tags:
        - Category
      summary: Delete Category
      description: Delete category by category ID
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/order/all:
    get:
      tags:
        - Order
      summary: All Orders
      description: Return all orders
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/order/place:
    post:
      tags:
        - Order
      summary: Place Order
      description: Create an order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Rameem
                email: rameem2019@gmail.com
                address: MIrour
                city: Dhaka
                postCode: "1216"
                phone: "01828810843"
                cartItems:
                  - product: 67cea0a44bec99ce984c7f30
                    color: red
                    size: xl
                    quantity: 3
                grandTotal: 5000
                paymentMethod: online
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/order/single/rameem2019@gmail.com:
    get:
      tags:
        - Order
      summary: Order info by user email
      description: Orders list by email
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/order/singlebyid/67d5866ba9c0c572a3734ade:
    get:
      tags:
        - Order
      summary: Get order by Order ID
      description: Orders list by order ID
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/order/response/67d5866ba9c0c572a3734ade:
    patch:
      tags:
        - Order
      summary: Update Delivery Status
      description: Update delivery status
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      parameters:
        - name: statusText
          in: query
          schema:
            type: string
          example: delivered
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/all:
    get:
      tags:
        - Product
      summary: All Products
      description: Return all products
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/single/67ce9bcf5d42c1e447dc7db7:
    get:
      tags:
        - Product
      summary: Get Single Product
      description: Get single product information by ID
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/featured:
    get:
      tags:
        - Product
      summary: Get Featured Products
      description: Return all featured products
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/hotsell:
    get:
      tags:
        - Product
      summary: Get Hotsell Products
      description: Return all hot sell products
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/subcategory:
    get:
      tags:
        - Product
      summary: Get Products by Sub Category
      description: Return products by sub category
      security:
        - noauthAuth: []
      parameters:
        - name: subCategory
          in: query
          schema:
            type: string
          example: katan
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/category/67e416853ab2056d3f683342:
    get:
      tags:
        - Product
      summary: Get Products by Category
      description: Return products by category
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/create:
    post:
      tags:
        - Product
      summary: Add New Product
      description: Create new product
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Natural Dye SKD (03126-20)
                description:
                  type: string
                  example: Natural Dye SKD (03126-20)
                sellingPrice:
                  type: integer
                  example: "15000"
                discountPrice:
                  type: integer
                  example: "14000"
                colors:
                  type: string
                  example: red,green, blue
                sizes:
                  type: string
                  example: l,xl,xxl
                stock:
                  type: integer
                  example: "200"
                category:
                  type: string
                  example: 67e416853ab2056d3f683342
                subCategory:
                  type: string
                  example: jamdani
                ratings:
                  type: string
                reviews:
                  type: string
                images:
                  type: string
                  format: binary
                featured:
                  type: boolean
                  example: "false"
                hotSell:
                  type: boolean
                  example: "false"
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/update/67ef5834a1959086d70ab625:
    patch:
      tags:
        - Product
      summary: Update Product
      description: Update product
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Katan Saree
                description:
                  type: string
                  example: Best Saree
                sellingPrice:
                  type: integer
                  example: "15000"
                discountPrice:
                  type: integer
                  example: "14000"
                colors:
                  type: string
                  example: red,green, blue
                sizes:
                  type: string
                  example: m, l, xl
                stock:
                  type: integer
                  example: "200"
                category:
                  type: string
                  example: 67ce997af6ffcc14532779b1
                subCategory:
                  type: string
                  example: Katan
                ratings:
                  type: string
                reviews:
                  type: string
                images:
                  type: string
                  format: binary
                featured:
                  type: boolean
                  example: "false"
                hotSell:
                  type: boolean
                  example: "false"
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /v1/product/delete/67ef5834a1959086d70ab625:
    delete:
      tags:
        - Product
      summary: Delete Products
      description: Delete product by ID
      security:
        - noauthAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
